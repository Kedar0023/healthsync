generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  emailVerified      Boolean
  image              String?
  age                Int?
  bloodGroup         String?
  dateOfBirth        DateTime?
  gender             String?
  phone              String?
  accounts           Account[]
  allergies          Allergy[]
  appointments       Appointment[]
  chronicConditions  ChronicCondition[]
  currentMedications CurrentMedication[]
  insurances         Insurance[]
  medicalRecords     MedicalRecord[]
  prescriptions      Prescription[]
  sessions           Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Insurance {
  id           String    @id @default(cuid())
  userId       String
  provider     String
  policyNumber String
  groupNumber  String?
  coverageType String
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("insurance")
}

model MedicalRecord {
  id           String   @id @default(cuid())
  userId       String
  recordType   String
  title        String
  description  String?
  date         DateTime
  doctorName   String?
  hospitalName String?
  fileUrl      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medical_record")
}

model Appointment {
  id           String   @id @default(cuid())
  userId       String
  doctorName   String
  hospitalName String?
  date         DateTime
  time         String
  type         String
  status       String   @default("Scheduled")
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointment")
}

model Prescription {
  id           String     @id @default(cuid())
  title        String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctorName   String
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id])
  startDate    DateTime
  endDate      DateTime?
  refills      Int        @default(0)
  status       String     @default("Active")
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("prescription")
}

model Medication {
  id            String         @id @default(cuid())
  name          String
  description   String?
  dosage        String
  frequency     String
  when          String // e.g., "Morning", "Evening", "Night", "After Dinner", "Before Dinner"
  sideEffects   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  prescriptions Prescription[]

  @@map("medication")
}

model ChronicCondition {
  id            String    @id @default(cuid())
  userId        String
  condition     String
  diagnosisDate DateTime?
  severity      String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chronic_condition")
}

model Allergy {
  id        String   @id @default(cuid())
  userId    String
  type      String
  name      String
  severity  String?
  reaction  String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("allergy")
}

model CurrentMedication {
  id           String    @id @default(cuid())
  userId       String
  name         String
  dosage       String
  frequency    String
  startDate    DateTime
  endDate      DateTime?
  prescribedBy String?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("current_medication")
}
